<?php

namespace App\Service\{{ entity.shortName }};

use App\Dto\{{ entity.shortName }}\{{ entity.shortName }}Dto;
use App\Entity\{{ entity.shortName }};
use App\Event\{{ entity.shortName }}\{{ entity.shortName }}Event;
use App\Exception\HydratorException;
use App\Interfaces\EntityInterface;
use App\Interfaces\Service\ServiceInterface;
use App\Service\EntityService;
use App\Service\EventService;
use App\Service\FlashBagService;
use ReflectionException;

class {{ entity.shortName }}Service implements ServiceInterface
{
    /**
     * @var EventService
     */
    private $eventService;

    /**
     * @var FlashBagService
     */
    private $flashBagService;

    /**
     * @var EntityService
     */
    private $entityService;

    /**
     * {{ entity.shortName }}Service constructor.
     *
     * @param EventService    $eventService
     * @param FlashBagService $flashBagService
     * @param EntityService   $entityService
     */
    public function __construct(
        EventService $eventService,
        FlashBagService $flashBagService,
        EntityService $entityService
    ) {
        $this->eventService = $eventService;
        $this->flashBagService = $flashBagService;
        $this->entityService = $entityService;
    }

    /**
    * @param {{ entity.shortName }}Dto ${{ entity.shortNameToLower }}Dto
    *
    * @return {{ entity.shortName }}
    *
    * @throws HydratorException
    */
    public function create{{ entity.shortName }}FromDto({{ entity.shortName }}Dto ${{ entity.shortNameToLower }}Dto): {{ entity.shortName }}
    {
        /** @var {{ entity.shortName }} ${{ entity.shortNameToLower }} */
        ${{ entity.shortNameToLower }} = $this->entityService->hydrateEntityWithDto(new {{ entity.shortName }}(), ${{ entity.shortNameToLower }}Dto);

        $this->eventService->dispatchEvent({{ entity.shortName }}Event::POST_CREATE, [
            '{{ entity.shortNameToLower }}' => ${{ entity.shortNameToLower }},
        ]);

        $this->flashBagService->addAndTransFlashMessage(
            '{{ entity.shortName }}',
            '{{ entity.shortName }} successfully created.',
            '{{ entity.shortNameToLower }}'
        );

        return ${{ entity.shortNameToLower }};
    }

    /**
    * @param {{ entity.shortName }}Dto ${{ entity.shortNameToLower }}Dto
    * @param {{ entity.shortName }}    ${{ entity.shortNameToLower }}
    *
    * @return {{ entity.shortName }}
    *
    * @throws HydratorException
    */
    public function update{{ entity.shortName }}FromDto({{ entity.shortName }}Dto ${{ entity.shortNameToLower }}Dto, {{ entity.shortName }} ${{ entity.shortNameToLower }}): {{ entity.shortName }}
    {
        /** @var {{ entity.shortName }} ${{ entity.shortNameToLower }} */
        ${{ entity.shortNameToLower }} = $this->entityService->hydrateEntityWithDto(${{ entity.shortNameToLower }}, ${{ entity.shortNameToLower }}Dto);

        $this->eventService->dispatchEvent({{ entity.shortName }}Event::POST_UPDATE, [
            '{{ entity.shortNameToLower }}' => ${{ entity.shortNameToLower }},
        ]);

        $this->flashBagService->addAndTransFlashMessage(
            '{{ entity.shortName }}',
            '{{ entity.shortName }} successfully updated.',
            '{{ entity.shortNameToLower }}'
        );

        return ${{ entity.shortNameToLower }};
    }

    /**
    * @param {{ entity.shortName }} ${{ entity.shortNameToLower }}
    *
    * @return $this
    *
    * @throws ReflectionException
    */
    public function delete{{ entity.shortName }}({{ entity.shortName }} ${{ entity.shortNameToLower }}): self
    {
        $this->entityService
            ->setEntity(${{ entity.shortNameToLower }})
            ->remove(${{ entity.shortNameToLower }})
            ->flush();

        $this->flashBagService->addAndTransFlashMessage(
            '{{ entity.shortName }}',
            '{{ entity.shortName }} successfully deleted.',
            $this->entityService->getEntityNameToLower()
        );

        $this->eventService->dispatchEvent({{ entity.shortName }}Event::POST_DELETE);

        return $this;
    }

    /**
    * @param {{ entity.shortName }} ${{ entity.shortNameToLower }}
    *
    * @return $this
    *
    * @throws ReflectionException
    */
    public function deleteSoft{{ entity.shortName }}({{ entity.shortName }} ${{ entity.shortNameToLower }})
    {
        ${{ entity.shortNameToLower }}->setArchived(true);

        $this->entityService
            ->setEntity(${{ entity.shortNameToLower }})
            ->persist(${{ entity.shortNameToLower }})
            ->flush();

        $this->flashBagService->addAndTransFlashMessage(
            '{{ entity.shortName }}',
            '{{ entity.shortName }} successfully deleted.',
            $this->entityService->getEntityNameToLower()
        );

        $this->eventService->dispatchEvent({{ entity.shortName }}Event::POST_DELETE);

        return $this;
    }

    /**
    * @param EntityInterface $entity
    *
    * @return string
    */
    public function getDeleteMessage(EntityInterface $entity): string
    {
        // TODO: Change the Delete Message

        /* @var {{ entity.shortName }} $entity */
        //  return $this->flashBagService->trans(
        //      'Are you sure you want to delete this {{ entity.shortNameToLower }} (%{{ entity.shortNameToLower }}%) ?',
        //      '{{ entity.shortNameToLower }}',
        //      ['{{ entity.shortNameToLower }}' => $entity->getName()]
        //  );

        return 'Are you sure you want to delete this {{ entity.shortNameToLower }}  ?';
    }
}
